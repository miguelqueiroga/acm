<mx:TitleWindow creationComplete="{init()}" close="{PopUpManager.removePopUp(this)}" xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Categorias de Despesas" width="620" height="390">
	<mx:Script>
		<![CDATA[
			import mx.collections.SortField;
			import mx.collections.Sort;
			import entity.CategoriaDespesa;
			import mx.events.ValidationResultEvent;
			import mx.validators.Validator;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.core.Application;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			import mx.collections.ArrayCollection;
			
			[Bindable]
			public var lista:ArrayCollection;
			public var idSelecionado:int = 0; 
            

			public function init():void{
				habilitaValidadores(false);
				listaCategoriaDespesas();
			}
			
			public function listaCategoriaDespesas():void{
				categoriaDespesaService.getList();
			}
			
			public function hrdpGrid(event:ResultEvent):void{
				lista = (ArrayCollection)(event.result);
				lista.sort = new Sort();
                lista.sort.fields = [new SortField("cdNome", false, false)];
                lista.refresh();
			}
			
			public function carregaDados():void{
				if(lista.length > 0) {
					if(dg.selectedIndex < 0)
						dg.selectedIndex = 0;
					var i : int;
					idSelecionado = dg.selectedItem.cdId;
					nome.text = dg.selectedItem.cdNome;
				}							
			}
			
			public function alterar():void{
				if ( dg.selectedIndex == -1)
					Alert.show("Selecione um Registro!");
				else{
					habilitaValidadores(true);
					habilitaEdic(true);
					carregaDados();
					habilitaAlter(true);
					nome.setFocus();
				}
			}
			
			public function habilitaEdic(hab:Boolean):void{
				nome.enabled = hab;
			}
			
			public function cancelaOper():void{
				limpaCampos();
				habilitaEdic(false);
				habilitaAlter(false);
				carregaDados();
				habilitaValidadores(false);				
			}
			
			public function criaNovo():void{
				habilitaValidadores(true);
				limpaCampos();
				habilitaEdic(true);
				habilitaAlter(true);
				nome.setFocus();
			}
			
			public function limpaCampos():void{
				idSelecionado = 0;
				nome.text = "";
			}
			
			public function habilitaAlter(hab:Boolean):void{
				btnNovo.enabled = !hab;
				btnAlterar.enabled = !hab;
				btnSalvar.enabled = hab;
				btnCancelar.enabled = hab;
				btnRemover.enabled = !hab;
				btnFechar.enabled = !hab;
				pdg.enabled = !hab;			
			}
			
			public function habilitaValidadores(hab:Boolean):void{
				validadorNome.enabled = hab;	
			}
			
			public function socioGravado(event:ResultEvent):void{
				habilitaValidadores(false);
				limpaCampos();
				habilitaEdic(false);
				habilitaAlter(false);
				listaCategoriaDespesas();
				Alert.show( "Categoria salva com sucesso!" );
			}
			
			public function socioRemovido(event:ResultEvent):void{
				limpaCampos();
				listaCategoriaDespesas();				
				Alert.show( "Categoria removida com sucesso!" );
			}
			
			public function erroGravando(event:FaultEvent):void{
				Alert.show( ObjectUtil.toString(event.fault));
			}
			
			public function getParameters():CategoriaDespesa{
				var cd : CategoriaDespesa = new CategoriaDespesa();
				cd.cdId = idSelecionado;
				cd.cdNome = nome.text;
				return cd;
			}
			
			public function salvarCategoriaDespesa():void{
				 if (validar()){
				 	if(Application.application.isAdministrador()) {
						categoriaDespesaService.save( this.getParameters());
				 	}
				 	else {
				 		Alert.show("Você não possui permissão \npara salvar registros!");
				 	}				 		
				 } 
			}
			
			public function removerSelecionado():void{
				Alert.yesLabel = "Sim";
			  	Alert.noLabel = "Não";
			  	Alert.show("Deseja remover esta Categoria?", "Remover", Alert.YES | Alert.NO, this, confirmaRemocao);				 
			}
			
			public function confirmaRemocao(event:CloseEvent):void{
				if (event.detail==Alert.YES) {
					if(dg.selectedIndex >= 0){
						if(Application.application.isAdministrador()){
							categoriaDespesaService.remove( this.getParameters() );							
						}
						else {
							Alert.show("Você não possui permissão \npara remover este registro!");
						}
					}
					else {
				 		Alert.show("Selecione um Registro!");
				 	}			
				}
			}			
			
			public function validar():Boolean{
				var valido : Boolean;
				
				for each (var v : Validator in validadores ){
					var resultEvent : ValidationResultEvent = v.validate();
					if( resultEvent.type != ValidationResultEvent.VALID ){
						valido = false;
						break;
					} else {
						valido = true;
					}
				}
				return valido;
			}
			
			public function validate(v:Validator):void{
				v.validate();								
			}
			
			public function upperCampo(campo : TextInput):void {
				var comparador: String = "àãõâêôáéíóúç";
				var texto: String = campo.text;
				var posicao: int = campo.selectionBeginIndex - 1;
				var caracter: String = texto.charAt(posicao);
				
				if (comparador.indexOf(caracter) != -1){
					var strCampo: String = campo.text;
					campo.text = strCampo.toUpperCase();
					campo.selectionBeginIndex = posicao+1;
					campo.selectionEndIndex = posicao+1;
				}				
			}
			
			//Ocorreu uma falha ao chamar algum servico servico.
			public function onFault(event:FaultEvent):void
			{												
				Alert.show(event.fault.rootCause.localizedMessage, "OCORREU UM ERRO");
			}
			
		]]>
	</mx:Script>
	
	<mx:Array id="validadores">
		
		<mx:StringValidator id="validadorNome" source="{nome}" minLength="2" required="true" property="text"
			requiredFieldError="Nome não pode ser vazio." tooShortError="Nome deve ter no mínimo 2 caracteres."
		/>	
		
	</mx:Array>
	
	<mx:RemoteObject id="categoriaDespesaService" showBusyCursor="true"
		fault="onFault(event)" destination="categoriaDespesaService">
		<mx:method name="save" fault="onFault(event)" result="socioGravado(event)">
			<mx:arguments>
	            <commandArgs>{CategoriaDespesa}</commandArgs>
	        </mx:arguments>
    	</mx:method>
    	<mx:method name="remove" fault="onFault(event)" result="socioRemovido(event)">
			<mx:arguments>
	            <commandArgs>{CategoriaDespesa}</commandArgs>
	        </mx:arguments>
    	</mx:method>
    	<mx:method name="getList" fault="onFault(event)" result="hrdpGrid(event)"/>
            		
	</mx:RemoteObject>
	<mx:Label x="10" y="12" text="Nome"/>
	<mx:TextInput x="62" y="10" width="308" id="nome" enabled="false" maxChars="40" restrict="[A-Z \- \\ ÀÃÕÂÊÔÁÉÍÓÚÇ àãõâêôáéíóúç]" change="validate(validadorNome); upperCampo(this.nome)"/>
	<mx:Panel id="pdg" x="0" y="38" layout="absolute" title="Categorias de Despesas Cadastradas" height="264" width="100%">
		<mx:DataGrid id="dg" dataProvider="{lista}" x="0" y="0" width="100%"
			change="{carregaDados()}" height="224" itemClick="{carregaDados()}">
			<mx:columns>
				<mx:DataGridColumn headerText="Nome" dataField="cdNome"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:Panel>
	<mx:ControlBar height="56">
		<mx:Button label="Adicionar" id="btnNovo" icon="@Embed('../images/add.png')" click="{criaNovo()}"/>
		<mx:Button label="Alterar" id="btnAlterar" icon="@Embed('../images/alter.png')" click="{alterar()}"/>
		<mx:Button label="Salvar" enabled="false" id="btnSalvar" icon="@Embed('../images/ok.png')" click="{salvarCategoriaDespesa()}"/>
		<mx:Button label="Cancelar" enabled="false" id="btnCancelar" icon="@Embed('../images/cancel.png')" click="{cancelaOper()}"/>
		<mx:Button label="Remover" id="btnRemover" click="{removerSelecionado()}" icon="@Embed(source='../images/menos.png')"/>
		<mx:Button label="Fechar" id="btnFechar" click="{PopUpManager.removePopUp(this)}" icon="@Embed('../images/close.png')"/>
	</mx:ControlBar>
	
</mx:TitleWindow>
