<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow creationComplete="{init()}" close="{PopUpManager.removePopUp(this)}" 
	xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Despesas da Empresa" 
	width="804" height="612" xmlns:components="components.*">
	<mx:Script>
		<![CDATA[
			import entity.util.CriterioDePesquisaComparacaoString;
			import entity.util.ConsultaPorCriterios;
			import entity.util.CriterioDePesquisaIntervalo;
			import entity.CategoriaDespesa;
			import entity.util.CriterioDePesquisaComparacaoNumero;
			import entity.util.CriterioDePesquisaOR;
			import entity.util.CriterioDePesquisa;
			import mx.events.CollectionEvent;
			import entity.DepartamentoSocio;
			import entity.Socio;
			import entity.Departamento;
			import entity.DepartamentoDepartamento;
			import mx.events.ValidationResultEvent;
			import mx.validators.Validator;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.core.Application;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			import mx.collections.ArrayCollection;
			
			[Bindable]
			private var dateInicial:Date = new Date(2010, 01, 01);
            [Bindable]
			private var dateFinal:Date = new Date(2010, 01, 01);
            
            [Bindable]
			public var departamentos:ArrayCollection;
            [Bindable]
			public var categorias:ArrayCollection;
            [Bindable]
			public var despesas:ArrayCollection;
            
            public function init():void{
				listaDepartamentos();	
				listaCategorias();	
				atualizaDepartamentosSelecionados();
				atualizaCategoriasSelecionadas();			
					
            }
 
            public function atualizaDepartamentosSelecionados():void {
                try {
                    var tArr:Array = departamentos.toArray().filter(filtraDepartamentosSelecionados);
                    //Alert.show(tArr.toString());
                    if(tArr.length == 0)
                    	labelDepartamentosSelecionados.text = "Nenhum departamento selecionado";
                    else if(tArr.length == 1)
                    	labelDepartamentosSelecionados.text = "1 depatamento selecionado";
                    else labelDepartamentosSelecionados.text = tArr.length.toString() + " depatamentos selecionados";
                } catch (err:Error) {
                    // ignore.
                }
            }
            
            public function atualizaCategoriasSelecionadas():void {
                try {
                    var tArr:Array = categorias.toArray().filter(filtraCategoriasSelecionadas);
                    //Alert.show(tArr.toString());
                    if(tArr.length == 0)
                    	labelCategoriasSelecionados.text = "Nenhuma categoria selecionada";
                    else if(tArr.length == 1)
                    	labelCategoriasSelecionados.text = "1 categoria selecionada";
                    else labelCategoriasSelecionados.text = tArr.length.toString() + " categorias selecionadas";
                } catch (err:Error) {
                    // ignore.
                }
            }
            
            private function filtraDepartamentosSelecionados(item:Departamento, idx:uint, arr:Array):Boolean {
                return item.isSelected;
            }
			
			private function filtraCategoriasSelecionadas(item:CategoriaDespesa, idx:uint, arr:Array):Boolean {
                return item.isSelected;
            }
			
			public function listaDepartamentos():void{
				departamentoService.getList();
			}
			
			public function listaCategorias():void{
				categoriaDespesaService.getList();
			}
			
			public function carregaDepartamentos(event:ResultEvent):void{
				departamentos = (ArrayCollection)(event.result);								
				pnDep.status = "Total: " + departamentos.length;
				labelDepartamentosSelecionados.text = "Nenhum departamento selecionado";
			}
			
			public function carregaCategorias(event:ResultEvent):void{
				categorias = (ArrayCollection)(event.result);
				catList.dataProvider = categorias;				
				pnCat.status = "Total: " + categorias.length;
				labelCategoriasSelecionados.text = "Nenhuma categoria selecionada";
			}
			
			public function limpaCampos():void{
				//nome.text = "";
			}
			
			public function getMesFormatado(mes:int):String{
				return ((mes < 9) ? "0" : "") + (mes + 1);
			}
			
			public function getCriteriosConsulta():ArrayCollection{
				var consulta:String = ""
				var tArr:Array = departamentos.toArray().filter(filtraDepartamentosSelecionados);
				var tArr2:Array = categorias.toArray().filter(filtraCategoriasSelecionadas);
				var criterios:ArrayCollection = new ArrayCollection();
				var i:int;
				var criterioIntervalo:CriterioDePesquisaIntervalo = new CriterioDePesquisaIntervalo();
				criterioIntervalo.criterio = "dpvVencimento.venNome";
				criterioIntervalo.valorInicial = (dataInicial.displayedYear + "/" + getMesFormatado(dataInicial.displayedMonth));
				//Alert.show("dataInicial: " + criterioIntervalo.valorInicial);
				criterioIntervalo.valorFinal = (dataFinal.displayedYear + "/" + getMesFormatado(dataFinal.displayedMonth));
				//Alert.show("dataFinal: " + criterioIntervalo.valorFinal);
				criterios.addItem(criterioIntervalo);
				var criterioOR:CriterioDePesquisaOR;
				if(tArr.length > 0){
					var criteriosDepartamento:ArrayCollection = new ArrayCollection();					
					criterioOR = new CriterioDePesquisaOR();
					for (i=0; i < tArr.length; i++) {
						var dep:Departamento = tArr[i];
						var cp:CriterioDePesquisaComparacaoNumero = new CriterioDePesquisaComparacaoNumero();
						cp.criterio = "dpvDespesa.desDepartamento.depId";
						cp.valor = dep.depId.toString();
						criteriosDepartamento.addItem(cp);							
					}
					criterioOR.criterios = criteriosDepartamento;
					criterios.addItem(criterioOR);									
					//Alert.show("enviei: " + criterios);
				}
				if(tArr2.length > 0){
					var criteriosCategorias:ArrayCollection = new ArrayCollection();					
					criterioOR = new CriterioDePesquisaOR();
					for (i=0; i < tArr2.length; i++) {
						var dep2:CategoriaDespesa = tArr2[i];
						var cp2:CriterioDePesquisaComparacaoNumero = new CriterioDePesquisaComparacaoNumero();
						cp2.criterio = "dpvDespesa.desCategoria.cdId";
						cp2.valor = dep2.cdId.toString();
						criteriosCategorias.addItem(cp2);							
					}
					criterioOR.criterios = criteriosCategorias;
					criterios.addItem(criterioOR);									
					//Alert.show("enviei: " + criterios);
				}
				return criterios;
			}
			
			public function realizaConsulta():void{				
				despesaPorVencimentoService.buscaPorCriterios(getCriteriosConsulta());
			}
			
			public function getStringConsulta():String{
				return ConsultaPorCriterios.getConsultaPorCriterios(getCriteriosConsulta(), "DespesaPorVencimento");
			}
			
			public function getStringConsultaOBS():String{
				var criterios:ArrayCollection = getCriteriosConsulta();
				var cp:CriterioDePesquisaComparacaoString = new CriterioDePesquisaComparacaoString();
				cp.criterio = "dpvObservacao";
				cp.valor = "_%";
				criterios.addItem(cp);
				return ConsultaPorCriterios.getConsultaPorCriterios(criterios, "DespesaPorVencimento");
			}
			
			public function getStringConsultaExtras():String{
				var criterios:ArrayCollection = getCriteriosConsulta();
				var cp:CriterioDePesquisaComparacaoString = new CriterioDePesquisaComparacaoString();
				cp.criterio = "dpvDespesa.desEhExtra";
				cp.valor = "SIM";
				criterios.addItem(cp);
				return ConsultaPorCriterios.getConsultaPorCriterios(criterios, "DespesaPorVencimento");
			}
			
			public function getDepartamentosSelecionados(): String{
				var tArr:Array = departamentos.toArray().filter(filtraDepartamentosSelecionados);
				var i:int;
				if(tArr.length > 1){
					var nomesDepartamentos:String = "";					
					for (i=0; i < tArr.length; i++) {
						var dep:Departamento = tArr[i];
						nomesDepartamentos += dep.depNome;
						if((tArr.length - i) > 2)
							nomesDepartamentos += ", ";
						else
							nomesDepartamentos += " e ";
					}
					return nomesDepartamentos;										
				}
				else if(tArr.length == 1){ 
					var dep:Departamento = tArr[0];
					return dep.depNome;
				}
				else
					return "TODOS";				
			}
			
			public function getCategoriasSelecionadas(): String{
				var tArr:Array = categorias.toArray().filter(filtraCategoriasSelecionadas);
				var i:int;
				if(tArr.length > 1){
					var nomesCategorias:String = "";					
					for (i=0; i < tArr.length; i++) {
						var cat:CategoriaDespesa = tArr[i];
						nomesCategorias += cat.cdNome;
						if((tArr.length - i) > 2)
							nomesCategorias += ", ";
						else
							nomesCategorias += " e ";
					}
					return nomesCategorias;										
				}
				else if(tArr.length == 1){ 
					var cat:CategoriaDespesa = tArr[i];
					return cat.cdNome;
				}
				else
					return "TODAS";				
			}
			
			public function gerarRealtorioListagem(): void{				
				var request:URLRequest = new URLRequest("ServletReportDespesasListagem");
		 		var vars:URLVariables  = new URLVariables();
		 		
		 		vars.consulta = getStringConsulta();
		 		vars.dataInicial = (dataInicial.displayedYear + "/" + getMesFormatado(dataInicial.displayedMonth));
		 		vars.dataFinal = (dataFinal.displayedYear + "/" + getMesFormatado(dataFinal.displayedMonth));
				vars.departamentos = getDepartamentosSelecionados(); 
		 		vars.categorias = getCategoriasSelecionadas(); 
		 		
				request.data = vars;		
				request.method = URLRequestMethod.POST;
			
				navigateToURL ( request, "_blank" );				
			}
			
			public function gerarRealtorioPorMes(): void{				
				var request:URLRequest = new URLRequest("ServletReportDespesasPorMesCT");
		 		var vars:URLVariables  = new URLVariables();
		 		
		 		vars.consulta = getStringConsulta();
				vars.dataInicial = (dataInicial.displayedYear + "/" + getMesFormatado(dataInicial.displayedMonth));
		 		vars.dataFinal = (dataFinal.displayedYear + "/" + getMesFormatado(dataFinal.displayedMonth));
				vars.departamentos = getDepartamentosSelecionados(); 
		 		vars.categorias = getCategoriasSelecionadas(); 
		 		
				request.data = vars;		
				request.method = URLRequestMethod.POST;
			
				navigateToURL ( request, "_blank" );				
			}
			
			public function gerarRealtorioOBS(): void{				
				var request:URLRequest = new URLRequest("ServletReportDespesasOBS");
		 		var vars:URLVariables  = new URLVariables();
		 		
		 		vars.consulta = getStringConsultaOBS();
				vars.dataInicial = (dataInicial.displayedYear + "/" + getMesFormatado(dataInicial.displayedMonth));
		 		vars.dataFinal = (dataFinal.displayedYear + "/" + getMesFormatado(dataFinal.displayedMonth));
		 		vars.departamentos = getDepartamentosSelecionados(); 
		 		vars.categorias = getCategoriasSelecionadas(); 
		 		
				request.data = vars;		
				request.method = URLRequestMethod.POST;
			
				navigateToURL ( request, "_blank" );				
			}
			
			public function gerarRealtorioExtras(): void{				
				var request:URLRequest = new URLRequest("ServletReportDespesasExtras");
		 		var vars:URLVariables  = new URLVariables();
		 		
		 		vars.consulta = getStringConsultaExtras();
				vars.dataInicial = (dataInicial.displayedYear + "/" + getMesFormatado(dataInicial.displayedMonth));
		 		vars.dataFinal = (dataFinal.displayedYear + "/" + getMesFormatado(dataFinal.displayedMonth));
				vars.departamentos = getDepartamentosSelecionados(); 
		 		vars.categorias = getCategoriasSelecionadas(); 
		 		
				request.data = vars;		
				request.method = URLRequestMethod.POST;
			
				navigateToURL ( request, "_blank" );				
			}
			
			public function abreResultados(event:ResultEvent):void{
				//Alert.show("event: " + event);
				despesas = (ArrayCollection) (event.result);
				//Alert.show("alterei provider: ");
				dg.dataProvider = despesas;
				if(despesas.length == 0)
					pdg.status = "Não foi encontrada nenhuma despesa para o filtro solicitado";
				else if(despesas.length == 1)
					pdg.status = "Foi encontrada uma despesa";
				else 
					pdg.status = "Foram encontradas " + despesas.length + " despesas";
					
				
				//Alert.show("resultou em: " + despesas);				
			}
			
			public function validar():Boolean{
				var valido : Boolean;
				
				for each (var v : Validator in validadores ){
					var resultEvent : ValidationResultEvent = v.validate();
					if( resultEvent.type != ValidationResultEvent.VALID ){
						valido = false;
						break;
					} else {
						valido = true;
					}
				}
				return valido;
			}
			//Ocorreu uma falha ao chamar algum servico servico.
			public function onFault(event:FaultEvent):void
			{												
				Alert.show(event.fault.message);
			}
			
			private function propChainLabelFunction(item:Object,column:DataGridColumn):String
            {
                var currentItem:Object = item;
                var chain:Array = column.dataField.split(".");
                for each (var prop:String in chain)
                {
                        currentItem = currentItem[prop];
                }
                return currentItem.toString();
            }
            
		]]>
	</mx:Script>
	
	<mx:Array id="validadores">
		
	</mx:Array>
	
	<mx:RemoteObject id="departamentoService" showBusyCursor="true"
		fault="onFault(event)" destination="departamentoService">
		<mx:method name="getList" fault="onFault(event)" result="carregaDepartamentos(event)"/>            		
	</mx:RemoteObject>
	
	<mx:RemoteObject id="categoriaDespesaService" showBusyCursor="true"
		fault="onFault(event)" destination="categoriaDespesaService">
		<mx:method name="getList" fault="onFault(event)" result="carregaCategorias(event)"/>            		
	</mx:RemoteObject>
	
	<mx:RemoteObject id="despesaPorVencimentoService" showBusyCursor="true"
		fault="onFault(event)" destination="despesaPorVencimentoService">
		<mx:method name="buscaPorCriterios" fault="onFault(event)" result="abreResultados(event)">
			<mx:arguments>
	            <commandArgs>{ArrayCollection}</commandArgs>
	        </mx:arguments>
    	</mx:method>         		
	</mx:RemoteObject>
	
	<mx:Panel id="pnCat" x="10" y="85" width="374" height="224" layout="absolute" title="Categorias" status="Total: {categorias.length}">
		<mx:List id="catList" dataProvider="{categorias}" x="0" y="0" height="152" width="354">
			<mx:itemRenderer>
                <mx:Component>
                    <mx:CheckBox selectedField="isSelected"
                    	change="{onChange(event)}">
                        <mx:Script>
                            <![CDATA[
                            	import mx.core.Application;
                            	private function onChange(evt:Event):void {
                                    data.isSelected = !data.isSelected;
                                    var consulta:consultaDespesas = Application.application.loginEffect.target;
                                    consulta.atualizaCategoriasSelecionadas();                                    
                                }
                            ]]>
                        </mx:Script>

                    </mx:CheckBox>
                </mx:Component>
            </mx:itemRenderer>

		</mx:List>
        <mx:ControlBar horizontalAlign="right">
            <mx:Label id="labelCategoriasSelecionados" />
        </mx:ControlBar>
	</mx:Panel>
	<mx:Panel id="pnDep" x="401" y="85" width="373" height="224" layout="absolute" title="Departamentos" status="Total: {departamentos.length}">
		<mx:List dataProvider="{departamentos}" x="0" y="0" height="152" width="353">
			<mx:itemRenderer>
                <mx:Component>
                    <mx:CheckBox selectedField="isSelected"	change="{onChange(event)}">
                        <mx:Script>
                            <![CDATA[
                            	import mx.core.Application;
                            	private function onChange(evt:Event):void {
                                    data.isSelected = !data.isSelected;
                                    var consulta:consultaDespesas = Application.application.loginEffect.target;
                                    consulta.atualizaDepartamentosSelecionados();                                    
                                }
                            ]]>
                        </mx:Script>
                    </mx:CheckBox>
                </mx:Component>
            </mx:itemRenderer>
		</mx:List>
        <mx:ControlBar horizontalAlign="right">
            <mx:Label id="labelDepartamentosSelecionados" />
        </mx:ControlBar>

	</mx:Panel>
	<mx:Label x="10" y="10" text="Data Inicial:" fontSize="11" fontWeight="bold"/>
	<mx:VBox  x="10" y="37" height="28">
    	<components:MonthChooser id="dataInicial" yearNavigationEnabled="true" styleName="monthChooserStyles" selectedDate="{dateInicial}" height="31" width="160" showToday="false"/>
    </mx:VBox>	
	<mx:Label x="224" y="10" text="Data Final:" fontSize="11" fontWeight="bold"/>
	<mx:VBox x="224" y="37" height="28">
    	<components:MonthChooser id="dataFinal" yearNavigationEnabled="true" styleName="monthChooserStyles" selectedDate="{dateFinal}" height="31" width="160" showToday="false"/>
	</mx:VBox>	
	
	<mx:Panel id="pdg" x="0" y="317" layout="absolute" title="Resultado da Busca" height="211" width="100%" status="">
		<mx:DataGrid id="dg" dataProvider="{despesas}" x="0" y="0" width="100%" height="100%">
			<mx:columns>
				<mx:DataGridColumn headerText="Nome" dataField="dpvDespesa.desNome" width="80" labelFunction="propChainLabelFunction"/>
				<mx:DataGridColumn headerText="Categoria" dataField="dpvDespesa.desCategoria" labelFunction="propChainLabelFunction" width="80"/>
				<mx:DataGridColumn headerText="Valor" dataField="dpvValor" width="40"/>
				<mx:DataGridColumn headerText="Venc." dataField="dpvVencimento" labelFunction="propChainLabelFunction" width="40"/>
				<mx:DataGridColumn headerText="Departamento" dataField="dpvDespesa.desDepartamento" labelFunction="propChainLabelFunction" width="100"/>				
			</mx:columns>
		</mx:DataGrid>
	</mx:Panel>
	
	<mx:ControlBar height="52">
		<mx:Button label="Consulta" id="btnAlterar" icon="@Embed('../images/alter.png')" click="{realizaConsulta()}"/>
		<mx:Button label="Relatório Listagem" enabled="true" id="btnImprimir" icon="@Embed(source='../images/print.png')" click="{gerarRealtorioListagem()}"/>
		<mx:Button label="Relatório po Mês" enabled="true" id="btnImprimir0" icon="@Embed(source='../images/print.png')" click="{gerarRealtorioPorMes()}"/>
		<mx:Button label="Relatório OBS" enabled="true" id="btnImprimir1" icon="@Embed(source='../images/print.png')" click="{gerarRealtorioOBS()}"/>
		<mx:Button label="Relatório Extras" enabled="true" id="btnImprimir2" icon="@Embed(source='../images/print.png')" click="{gerarRealtorioExtras()}"/>
		<mx:Button label="Fechar" id="btnFechar" click="{PopUpManager.removePopUp(this)}" icon="@Embed('../images/close.png')"/>
	</mx:ControlBar>
	
	
	
</mx:TitleWindow>
