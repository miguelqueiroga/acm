<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow creationComplete="{init()}" close="{PopUpManager.removePopUp(this)}" 
	xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Contas Bancárias da Empresa" width="620" height="348">
	<mx:Script>
		<![CDATA[
			import entity.Socio;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import entity.ContaPagamento;
			import mx.events.ValidationResultEvent;
			import mx.validators.Validator;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.core.Application;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			import mx.collections.ArrayCollection;
			
			[Bindable]
			public var socios:ArrayCollection;
            [Bindable]
			public var lista:ArrayCollection; 
            public var idSelecionado:int = 0; 
            private var estaAdicionando:Boolean;
           

			public function init():void{
				habilitaValidadores(false);
				listaContaPagamentos();
				listaSocios();		
				estaAdicionando = false;
			}
			
			public function listaContaPagamentos():void{
				contaPagamentoService.getList();
			}
			
			public function hrdpGrid(event:ResultEvent):void{
				lista = (ArrayCollection)(event.result);
				lista.sort = new Sort();
                lista.sort.fields = [new SortField("cpNome", false, false)];
                lista.refresh();
			}
			
			public function listaSocios():void{
				socioService.getList();				
			}
			
			public function setSociosCombo(event:ResultEvent):void{
				socios = (ArrayCollection)(event.result);
				sociosCombo.dataProvider = socios;
				sociosCombo.selectedIndex = -1;		
				socios.sort = new Sort();
                socios.sort.fields = [new SortField("socNome", false, false)];
                socios.refresh();					
			}
			
			public function carregaDados():void{
				if(lista.length > 0) {
					if(dg.selectedIndex < 0)
						dg.selectedIndex = 0;
					var i : int;
					idSelecionado = dg.selectedItem.cpId;
					nome.text = dg.selectedItem.cpNome;		
					banco.text = dg.selectedItem.cpBanco;		
					agencia.text = dg.selectedItem.cpAgencia;		
					conta.text = dg.selectedItem.cpConta;
					var socio:Socio = dg.selectedItem.cpSocio as Socio;
					if(socio != null){
						for ( i=0; i < socios.length; i++){
							var cp4 : Socio = (Socio) (socios.getItemAt(i));
							if (socio.socId == cp4.socId)
								sociosCombo.selectedIndex = i;
						}
					}
					else
						sociosCombo.selectedIndex = -1;
				}								
			}
			
			public function alterar():void{
				if ( dg.selectedIndex == -1)
					Alert.show("Selecione um Registro!");
				else{
					habilitaValidadores(true);
					habilitaEdic(true);
					carregaDados();
					habilitaAlter(true);
					nome.setFocus();
				}
			}
			
			public function habilitaEdic(hab:Boolean):void{
				nome.enabled = hab;
				banco.enabled = hab;
				conta.enabled = hab;
				agencia.enabled = hab;	
				sociosCombo.enabled = hab;			
			}
			
			public function cancelaOper():void{
				limpaCampos();
				habilitaEdic(false);
				habilitaAlter(false);
				carregaDados();
				habilitaValidadores(false);					
			}
			
			public function criaNovo():void{
				habilitaValidadores(true);
				limpaCampos();
				habilitaEdic(true);
				habilitaAlter(true);
				nome.setFocus();				
				estaAdicionando = true;
			}
			
			public function limpaCampos():void{
				idSelecionado = 0;
				nome.text = "";
				banco.text = "";
				agencia.text = "";
				conta.text = "";		
				sociosCombo.selectedIndex = -1;		
				estaAdicionando = false;
			}
			
			public function habilitaAlter(hab:Boolean):void{
				btnNovo.enabled = !hab;
				btnAlterar.enabled = !hab;
				btnSalvar.enabled = hab;
				btnCancelar.enabled = hab;
				btnRemover.enabled = !hab;
				btnFechar.enabled = !hab;
				pdg.enabled = !hab;			
			}
			
			public function habilitaValidadores(hab:Boolean):void{
				validadorNome.enabled = hab;
				validadorBanco.enabled = hab;	
				validadorAgencia.enabled = hab;
				validadorConta.enabled = hab;
			}
			
			public function contaPagamentoGravado(event:ResultEvent):void{
				habilitaEdic(false);
				habilitaAlter(false);
			 	habilitaValidadores(false);
				if(!estaAdicionando){ 
					var cp:ContaPagamento = event.result as ContaPagamento;
					var cpAntigo:ContaPagamento = lista.getItemAt(dg.selectedIndex) as ContaPagamento;
					cpAntigo = cp;
					dg.setFocus();	
					if(dg.selectedIndex < lista.length){
						dg.selectedIndex = dg.selectedIndex + 1;		
					}
					carregaDados();			
				}
				else {
					estaAdicionando = false;
				}
				Alert.show( "Conta bancária salva com sucesso!" );				
			}
			
			public function contaPagamentoRemovido(event:ResultEvent):void{
				listaContaPagamentos();
				Alert.show( "Conta bancária removida com sucesso!" );				
			}
			
			public function erroGravando(event:FaultEvent):void{
				Alert.show( ObjectUtil.toString(event.fault));
			}
			
			public function getParameters():ContaPagamento{
				var contaPagamento : ContaPagamento = null;
				if(!estaAdicionando){
					contaPagamento = (ContaPagamento) (lista.getItemAt(dg.selectedIndex));
				}
				else {
					contaPagamento = new ContaPagamento();
					if(lista != null)
						lista.addItem(contaPagamento);	
				}contaPagamento.cpId = idSelecionado;
				contaPagamento.cpNome = nome.text;
				contaPagamento.cpBanco = banco.text;
				contaPagamento.cpAgencia = agencia.text;
				contaPagamento.cpConta = conta.text;			
				if(sociosCombo.selectedIndex >= 0) 
					contaPagamento.cpSocio = socios.getItemAt(sociosCombo.selectedIndex) as Socio;
				return contaPagamento;
			}
			
			public function salvarContaPagamento():void{
				 if (validar()) {
				 	if(Application.application.isAdministrador()) {
						contaPagamentoService.save( this.getParameters());
				 	} else {
						Alert.show("Você não possui permissão \npara salvar registros!");
					}										
				 }
			}
			
			public function removerSelecionado():void{
				Alert.yesLabel = "Sim";
			  	Alert.noLabel = "Não";
			  	Alert.show("Deseja remover esta Conta Bancária?","Remover", Alert.YES | Alert.NO, this, confirmaRemocao);				 
			}
			
			public function confirmaRemocao(event:CloseEvent):void{
				if (event.detail==Alert.YES) {
					if(dg.selectedIndex >= 0){
						if(Application.application.isAdministrador()){
							contaPagamentoService.remove( this.getParameters() );
							limpaCampos();
						}
						else {
							Alert.show("Você não possui permissão \npara remover este registro!");
						}
					}
					else {
				 		Alert.show("Selecione um Registro!");
				 	}			
				}
			}
			
			public function validar():Boolean{
				var valido : Boolean;
				
				for each (var v : Validator in validadores ){
					var resultEvent : ValidationResultEvent = v.validate();
					if( resultEvent.type != ValidationResultEvent.VALID ){
						valido = false;
						break;
					} else {
						valido = true;
					}
				}
				return valido;
			}
			public function validate(v:Validator):void{
				v.validate();								
			}
			
			public function upperCampo(campo : TextInput):void {
				var comparador: String = "àãõâêôáéíóúç";
				var texto: String = campo.text;
				var posicao: int = campo.selectionBeginIndex - 1;
				var caracter: String = texto.charAt(posicao);
				
				if (comparador.indexOf(caracter) != -1){
					var strCampo: String = campo.text;
					campo.text = strCampo.toUpperCase();
					campo.selectionBeginIndex = posicao+1;
					campo.selectionEndIndex = posicao+1;
				}
			}
			
			//Ocorreu uma falha ao chamar algum servico servico.
			public function onFault(event:FaultEvent):void
			{												
				Alert.show(event.fault.rootCause.localizedMessage, "OCORREU UM ERRO");
			}
			
		]]>
	</mx:Script>
	
	<mx:Array id="validadores">
		
		<mx:StringValidator id="validadorNome" source="{nome}" minLength="2" required="true" property="text"
			requiredFieldError="Nome não pode ser vazio." tooShortError="Nome deve ter no mínimo 2 caracteres."
		/>	
		
		<mx:StringValidator id="validadorBanco" source="{banco}" minLength="3" required="true" property="text"
			requiredFieldError="O nome do Banco não pode ser vazio." tooShortError="O nome do Banco deve ter no mínimo 4 caracteres."
		/>	
		
		<mx:StringValidator id="validadorAgencia" source="{agencia}" minLength="5" required="true" property="text"
			requiredFieldError="A Agencia não pode ser vazia." tooShortError="A Agencia deve ter no mínimo 5 caracteres."
		/>	
		
		<mx:StringValidator id="validadorConta" source="{conta}" minLength="5" required="true" property="text"
			requiredFieldError="A Conta não pode ser vazia." tooShortError="A Conta deve ter no mínimo 5 caracteres."
		/>	
		
	</mx:Array>
	
	<mx:RemoteObject id="contaPagamentoService" showBusyCursor="true"
		fault="onFault(event)" destination="contaPagamentoService">
		<mx:method name="save" fault="onFault(event)" result="contaPagamentoGravado(event)">
			<mx:arguments>
	            <commandArgs>{ContaPagamento}</commandArgs>
	        </mx:arguments>
    	</mx:method>
    	<mx:method name="remove" fault="onFault(event)" result="contaPagamentoRemovido(event)">
			<mx:arguments>
	            <commandArgs>{ContaPagamento}</commandArgs>
	        </mx:arguments>
    	</mx:method>
    	<mx:method name="getList" fault="onFault(event)" result="hrdpGrid(event)"/>            		
	</mx:RemoteObject>
	
	<mx:RemoteObject id="socioService" showBusyCursor="true"
		fault="onFault(event)" destination="socioService">
		<mx:method name="getList" fault="onFault(event)" result="setSociosCombo(event)"/>            		
	</mx:RemoteObject>
	
	<mx:Label x="10" y="12" text="Nome"/>
	<mx:TextInput x="62" y="10" width="213" id="nome" enabled="false" maxChars="100" restrict="[A-Z \- \\ [ÀÃÕÂÊÔÁÉÍÓÚÇ]" change="validate(validadorNome); upperCampo(this.nome)"/>
	<mx:Label x="283" y="12" text="Banco"/>
	<mx:Label x="283" y="40" text="Sócio"/>
	<mx:TextInput x="329" y="10" width="261" id="banco" enabled="false" maxChars="50" restrict="[A-Z \- \\ ÀÃÕÂÊÔÁÉÍÓÚÇ]" change="validate(validadorBanco); upperCampo(this.banco)"/>	
	<mx:Label x="10" y="40" text="Agência"/>
	<mx:TextInput x="62" y="38" width="79" id="agencia" enabled="false" maxChars="15" restrict="[A-Z 0-9 \-]" change="validate(validadorAgencia)"/>
	<mx:Label x="149" y="40" text="Conta"/>
	<mx:TextInput x="195" y="38" width="80" id="conta" enabled="false" maxChars="15" restrict="[A-Z 0-9 \-]" change="validate(validadorConta)"/>
	<mx:Panel id="pdg" x="0" y="68" layout="absolute" title="Contas Bancárias Cadastrados" height="189" width="100%">
		<mx:DataGrid id="dg" dataProvider="{lista}" x="0" y="0" width="100%"
			change="{carregaDados()}" height="149" itemClick="{carregaDados()}">
			<mx:columns>
				<mx:DataGridColumn headerText="Nome" dataField="cpNome" width="100"/>
				<mx:DataGridColumn headerText="Banco" dataField="cpBanco" width="100"/>
				<mx:DataGridColumn headerText="Agência" dataField="cpAgencia" width="60"/>
				<mx:DataGridColumn headerText="Conta" dataField="cpConta" width="60"/>
				<mx:DataGridColumn headerText="Socia" dataField="cpSocio" width="60"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:Panel>
	<mx:ComboBox dataProvider="{socios}" x="329" y="38" width="261" id="sociosCombo" enabled="false" labelField="socNome">
	</mx:ComboBox>
	<mx:ControlBar height="55" y="269">
		<mx:Button label="Adicionar" id="btnNovo" icon="@Embed('../images/add.png')" click="{criaNovo()}"/>
		<mx:Button label="Alterar" id="btnAlterar" icon="@Embed('../images/alter.png')" click="{alterar()}"/>
		<mx:Button label="Salvar" enabled="false" id="btnSalvar" icon="@Embed('../images/ok.png')" click="{salvarContaPagamento()}"/>
		<mx:Button label="Cancelar" enabled="false" id="btnCancelar" icon="@Embed('../images/cancel.png')" click="{cancelaOper()}"/>
		<mx:Button label="Remover" id="btnRemover" click="{removerSelecionado()}" icon="@Embed(source='../images/menos.png')"/>
		<mx:Button label="Fechar" id="btnFechar" click="{PopUpManager.removePopUp(this)}" icon="@Embed('../images/close.png')"/>
	</mx:ControlBar>
	
</mx:TitleWindow>
